package com.winsun.fruitmix.Fragment;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.Image;
import android.os.AsyncTask;
import android.support.annotation.NonNull;
import android.support.design.widget.CoordinatorLayout;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.widget.Toolbar;
import android.util.Base64;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.TranslateAnimation;
import android.widget.BaseAdapter;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;

import com.winsun.fruitmix.AlbumPicContentActivity;
import com.winsun.fruitmix.CreateAlbumActivity;
import com.winsun.fruitmix.NavPagerActivity;
import com.winsun.fruitmix.PhotoSliderActivity;
import com.winsun.fruitmix.R;
import com.winsun.fruitmix.component.StatedImageView;
import com.winsun.fruitmix.util.FNAS;
import com.winsun.fruitmix.util.LocalCache;
import com.winsun.fruitmix.util.Util;

import org.json.JSONArray;
import org.json.JSONObject;

import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

/**
 * Created by Administrator on 2016/4/19.
 */
public class PhotoList implements NavPagerActivity.Page{

    NavPagerActivity containerActivity;
    View view;

    public ListView mainListView;
    List<Map<String, Object>> dateList;
    List<Map<String, Object>> imgList;

    boolean sInRefresh=true;

    boolean sMenuUnfolding=false;

    public PhotoList(NavPagerActivity activity_) {
        containerActivity=activity_;

        view = LayoutInflater.from(containerActivity.getApplicationContext()).inflate(
                R.layout.photo_list2, null);

        //Log.d("wisnun", ""+LocalCache.PhotoList("Camera"));
        //loadLocalData();
        //loadRemoteData();
        while(true) {
            try {
                Thread.sleep(2000);
                reloadList();
                break;
            }
            catch (Exception e) {
                try {
                    e.printStackTrace();
                    Thread.sleep(1000);
                }catch (Exception e1) {}
            }
        }


        mainListView=(ListView)view.findViewById(R.id.mainList);
        mainListView.setAdapter(new MainListViewAdapter(this));

        /*
        ImageView iv = (ImageView) view.findViewById(R.id.aaa);
        iv.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent();
                intent.setClass(containerActivity, PhotoSliderActivity.class);
                containerActivity.startActivity(intent);
            }
        });
        */

        containerActivity.fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (sMenuUnfolding) {
                    sMenuUnfolding = false;
                    containerActivity.llBtMenu.setVisibility(View.GONE);
                } else {
                    sMenuUnfolding = true;
                    containerActivity.llBtMenu.setVisibility(View.VISIBLE);
                }
            }
        });

    }

    public void refreshView() {
        //Log.d("winsun", "inv");
        calcSelectAll();
        ((BaseAdapter)mainListView.getAdapter()).notifyDataSetChanged();
    }

    public void calcSelectAll() {
        int count1, count2, i, j;
        List<Map<String, Object>> imageList;

        for(i=0; i<dateList.size(); i++) {
            imageList=(List<Map<String, Object>>)dateList.get(i).get("images");
            count1=0; count2=0;
            for(j=0; j<imageList.size(); j++) {
                count1++;
                if(imageList.get(j).get("selected").equals("1")) count2++;
            }
            if(count1==count2) dateList.get(i).put("selected", "1");
            else dateList.get(i).put("selected", "0");
        }
        List<Map<String, Object>> dateList;
    }

    public void createAlbum() {
        Intent intent=new Intent();
        intent.setClass(containerActivity, CreateAlbumActivity.class);
        intent.putExtra("selectedUIDStr", getSelectedUIDString());
        containerActivity.startActivityForResult(intent, 100);
    }

    /*
    public void loadLocalData() {

        List<Map<String, String>> localPhotoList;
        int i;
        Map<String, String> itemRaw, item;
        HashMap<String, Map<String, String>> localHashMap;
        Map<String, String> localHashObj;

        localPhotoList = LocalCache.PhotoList("Camera");
        localHashMap=LocalCache.GetGlobalHashMap("localHashMap");

        LocalCache.LocalImagesMap=new HashMap<String, Map<String, String>>();

        for (i = 0; i < localPhotoList.size(); i++) {
            item = new HashMap<String, String>();
            itemRaw = localPhotoList.get(i);
            item.put("cacheType", "local");
            item.put("resID", "" + R.drawable.default_img);
            item.put("thumb", itemRaw.get("thumb"));
            item.put("width", itemRaw.get("width"));
            item.put("height", itemRaw.get("height"));
            item.put("mtime", itemRaw.get("lastModified"));
            item.put("selected", "0");
            item.put("locked", "1");
            if(!localHashMap.containsKey(itemRaw.get("thumb"))) {
                localHashObj=new HashMap<String, String>();
                localHashObj.put("digest", Util.CalcSHA256OfFile(itemRaw.get("thumb")));
                localHashMap.put(itemRaw.get("thumb"), localHashObj);
            }
            item.put("resHash", localHashMap.get(itemRaw.get("thumb")).get("digest"));
            item.put("uuid", localHashMap.get(itemRaw.get("thumb")).get("digest"));
            LocalCache.LocalImagesMap.put(item.get("uuid"), item);
            Log.d("winsun", item + "");
        }

        LocalCache.SetGlobalHashMap("localHashMap", localHashMap);
        reloadList();


        new Thread(new Runnable() {
            @Override
            public void run() {
                Map<String, String> localHashObj;
                HashMap<String, Map<String, String>> localHashMap;

                localHashMap=LocalCache.GetGlobalHashMap("localHashMap");
                for(String key:localHashMap.keySet()) {
                    localHashObj=localHashMap.get(key);
                    if(localHashObj.containsKey("uploaded")&&localHashObj.get("uploaded").equals("1")) ;
                    else {
                        if(FNAS.UploadFile(key)) {
                            localHashObj.put("uploaded", "1");
                        }
                    }
                }
                LocalCache.SetGlobalHashMap("localHashMap", localHashMap);

            }
        }).start();

    }*/


    public void reloadList() {

        Map<String, Map<String, Object>> dateMap;
        Map<String, String> itemRaw;
        Map<String, Object> dateItem, imageItem;
        List<Map<String, Object>> dateList1;
        List<Map<String, Object>> imgList1;
        String date;
        int i;

        // dateMap Tree
        dateMap=new HashMap<String, Map<String, Object>>();
/*
        for(String key:LocalCache.LocalImagesMap.keySet()) {
            itemRaw=LocalCache.LocalImagesMap.get(key);
            date=itemRaw.get("mtime").substring(0, 10);
            dateItem=dateMap.get(date);
            if(dateItem==null) {
                dateItem=new HashMap<String, Object>();
                dateItem.put("title", date);
                dateItem.put("images", new ArrayList<Map<String, Object>>());
                dateItem.put("selected", "0");
                dateMap.put(date, dateItem);
            }
            imageItem=new HashMap<String, Object>();
            imageItem.put("cacheType", "local");
            imageItem.put("resID", ""+R.drawable.default_img);
            imageItem.put("resHash", itemRaw.get("uuid"));
            imageItem.put("thumb", itemRaw.get("thumb"));
            imageItem.put("width", itemRaw.get("width"));
            imageItem.put("height", itemRaw.get("height"));
            imageItem.put("uuid", itemRaw.get("uuid"));
            imageItem.put("mtime", itemRaw.get("mtime"));
            imageItem.put("selected", "0");
            imageItem.put("locked", "1");
            ((List<Map<String, Object>>)(dateItem.get("images"))).add(imageItem);
        }*/

        for(String key:LocalCache.MediasMap.keySet()) {
            itemRaw=LocalCache.MediasMap.get(key);
            date=itemRaw.get("mtime").substring(0, 10);
            dateItem=dateMap.get(date);
            if(dateItem==null) {
                dateItem=new HashMap<String, Object>();
                dateItem.put("title", date);
                dateItem.put("images", new ArrayList<Map<String, Object>>());
                dateItem.put("selected", "0");
                dateMap.put(date, dateItem);
            }
            imageItem=new HashMap<String, Object>();
            imageItem.put("cacheType", "nas");
            imageItem.put("resID", ""+R.drawable.default_img);
            imageItem.put("resHash", itemRaw.get("uuid"));
            imageItem.put("thumb", "");
            imageItem.put("width", itemRaw.get("width"));
            imageItem.put("height", itemRaw.get("height"));
            imageItem.put("uuid", itemRaw.get("uuid"));
            imageItem.put("mtime", itemRaw.get("mtime").replace("T", " ").replace("Z", " "));
            imageItem.put("selected", "0");
            imageItem.put("locked", "1");
            ((List<Map<String, Object>>)(dateItem.get("images"))).add(imageItem);
        }

        Log.d("winsun", "dateMap "+dateMap);

        // sort
        dateList1=new ArrayList<Map<String, Object>>();
        for(String key:dateMap.keySet()) {
            dateList1.add(dateMap.get(key));
        }
        Collections.sort(dateList1, new Comparator() {
            @Override
            public int compare(Object lhs, Object rhs) {
                Map<String, Object> map1, map2;
                map1 = (Map<String, Object>) lhs;
                map2 = (Map<String, Object>) rhs;
                return -map1.get("title").toString().compareTo(map2.get("title").toString());
            }
        });
        dateList=dateList1;

        // imageList
        imgList1=new ArrayList<Map<String, Object>>();
        for(i=0; i<dateList.size(); i++) {
            imgList1.addAll((List<Map<String, Object>>)dateList.get(i).get("images"));
        }
        imgList=imgList1;

    }

    /*
    public void loadRemoteData() {

        new AsyncTask<Object, Object, Boolean>() {
            @Override
            protected Boolean doInBackground(Object...params) {
                String str, date;
                JSONArray json;
                int i;
                JSONObject itemRaw;
                Map<String, String> item;

                try {

                    str=FNAS.RemoteCall("/media?filter=photo");

                    json=new JSONArray(str);
                    for(i=0; i<json.length(); i++) {
                        itemRaw=json.getJSONObject(i);
                        //if(itemRaw.getString("name").endsWith(".jpg")) {
                            item = new HashMap<String, String>();
                            item.put("cacheType", "nas");
                            item.put("resID", "" + R.drawable.default_img);
                            item.put("resHash", "" + itemRaw.getString("hash"));
                            item.put("mtime", itemRaw.getString("changetime"));
                            item.put("selected", "0");
                            item.put("locked", "1");
                            try {
                                item.put("width", itemRaw.getJSONObject("detail").getString("width"));
                                item.put("height", itemRaw.getJSONObject("detail").getString("height"));
                            }
                            catch (Exception e) {
                                try {
                                    item.put("width", itemRaw.getJSONObject("detail").getJSONObject("exif").getString("ExifImageWidth"));
                                    item.put("height", itemRaw.getJSONObject("detail").getJSONObject("exif").getString("ExifImageHeight"));
                                    item.put("mtime", itemRaw.getJSONObject("detail").getJSONObject("exif").getString("CreateDate"));
                                }
                                catch (Exception e1) {
                                    item.put("width", "100");
                                    item.put("height", "100");
                                }
                            }
                            item.put("uuid", itemRaw.getString("hash"));
                            LocalCache.Images.put(item.get("uuid"), item);
                            Log.d("winsun", ""+itemRaw);
                        //}
                    }

                }catch (Exception e) { e.printStackTrace(); return false; }

                reloadList();

                return true;
            }

            @Override
            protected void onPostExecute(Boolean sSuccess) {
                if(sSuccess) ((BaseAdapter)(mainListView.getAdapter())).notifyDataSetChanged();
            }

        }.execute();


    }*/

    public String getSelectedUIDString() {
        ArrayList<String> selectedArr;
        int i;
        String st;

        selectedArr=getSelectedUIDArray();
        st="";
        for(i=0; i<selectedArr.size(); i++) st+=","+selectedArr.get(i);
        if(st.startsWith(",")) st=st.substring(1);
        return st;
    }

    public ArrayList<String> getSelectedUIDArray() {
        ArrayList<String> selectedArr;
        List<Map<String, Object>> imgList;
        int i, j;

        selectedArr=new ArrayList<String>();

        for(i=0; i<dateList.size(); i++) {
            imgList=(List<Map<String, Object>>)dateList.get(i).get("images");
            for(j=0; j<imgList.size(); j++) {
                if(imgList.get(j).get("selected").equals("1")) selectedArr.add(imgList.get(j).get("uuid").toString());
            }
        }

        Log.d("winsun", selectedArr+"");
        return selectedArr;
    }


    public void onDidAppear() {
        containerActivity.toolbar.setTitle("Photo");
        containerActivity.lbRight.setVisibility(View.VISIBLE);
        containerActivity.lbRight.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                containerActivity.showChooseHeader();
            }
        });
        //containerActivity.fab.setVisibility(View.VISIBLE);
        //containerActivity.toolbar.setVisibility(View.GONE);
        //containerActivity.toolbar.setNavigationIcon(R.drawable.menu);
        /*
        view.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Log.d("winsun", "CCCC 1");
            }
        });*/
        /*
        container.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Log.d("winsun", "CCCC 1");



            }
        });*/
    }

    public View getView()
    {       return view;
    }

    class MainListViewAdapter extends BaseAdapter {

        PhotoList container;

        public MainListViewAdapter(PhotoList container_) {
            container=container_;
        }

        @Override
        public int getCount() {
            if(container.dateList==null) return 0;
            return container.dateList.size();
        }

        @Override
        public View getView(final int position, View convertView, ViewGroup parent) {
            View view;
            TextView lbTitle;
            GridView gvGrid;
            final Map<String, Object> currentItem;
            ImageGridViewAdapter adapter;
            ImageView ivSelectAll;

            if(convertView==null) view=LayoutInflater.from(container.containerActivity).inflate(R.layout.photo_list_cell, parent, false);
            else view=convertView;

            currentItem=(Map<String, Object>)this.getItem(position);

            lbTitle=(TextView)view.findViewById(R.id.title);
            lbTitle.setText((String) currentItem.get("title"));
            lbTitle.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    List<Map<String, Object>> imageList;
                    int i;
                    if(container.containerActivity.sInChooseMode) {
                        imageList=(List<Map<String, Object>>)currentItem.get("images");
                        if(currentItem.get("selected").equals("1")) {
                            for(i=0; i<imageList.size(); i++) imageList.get(i).put("selected", "0");
                        }
                        else{
                            for(i=0; i<imageList.size(); i++) imageList.get(i).put("selected", "1");
                        }
                    }
                    calcSelectAll();
                    ((BaseAdapter)container.mainListView.getAdapter()).notifyDataSetChanged();
                }
            });

            gvGrid=(GridView)view.findViewById(R.id.grid);
            if(currentItem.get("adapter")==null) {
                adapter=new ImageGridViewAdapter(container, currentItem);
                currentItem.put("adapter", adapter);
                gvGrid.setAdapter(adapter);
            }
            else if(gvGrid.getAdapter()!=currentItem.get("adapter")) {
                gvGrid.setAdapter((ImageGridViewAdapter)currentItem.get("adapter"));
            }
            else if(sInRefresh) {
                ((BaseAdapter)gvGrid.getAdapter()).notifyDataSetChanged();
            }

            ivSelectAll=(ImageView)view.findViewById(R.id.selectAll);
            if(container.containerActivity.sInChooseMode) {
                ivSelectAll.setVisibility(View.VISIBLE);
                if(currentItem.get("selected").equals("1")) ivSelectAll.setImageResource(R.drawable.select);
                else ivSelectAll.setImageResource(R.drawable.unselected);
            }
            else ivSelectAll.setVisibility(View.GONE);


            return view;
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public Object getItem(int position) {
            return container.dateList.get(position);
        }
    }


    class ImageGridViewAdapter extends BaseAdapter {

        PhotoList container;
        Map<String, Object> dateItem;

        public ImageGridViewAdapter(PhotoList container_,  Map<String, Object> dateItem_) {
            container=container_;
            dateItem=dateItem_;
        }

        @Override
        public int getCount() {
            return ((List<Map<String, Object>>)dateItem.get("images")).size();
        }

        @Override
        public View getView(final int position, View convertView, ViewGroup parent) {
            View view;
            ImageView ivLock, ivSelect, ivMain;
            final Map<String, Object> currentItem;
            int w, h;

            if(convertView==null) view=LayoutInflater.from(container.containerActivity).inflate(R.layout.photo_list_cell_cell, parent, false);
            else view=convertView;
            //Log.d("winsun", "inv2");
            currentItem=(Map<String, Object>)this.getItem(position);
            ivMain=(ImageView)view.findViewById(R.id.mainPic);
            ivLock=(ImageView)view.findViewById(R.id.lock);
            ivSelect=(ImageView)view.findViewById(R.id.select);

            w=Integer.parseInt((String)currentItem.get("width"));
            h=Integer.parseInt((String)currentItem.get("height"));
            if(w>=h) { w=w*100/h; h=100; }
            else  { h=h*100/w; w=100; }

            if(currentItem.get("cacheType").equals("local")) {  // local bitmap path
                LocalCache.LoadLocalBitmapThumb((String) currentItem.get("thumb"), w, h, ivMain);
            }
            else if(currentItem.get("cacheType").equals("nas")) {
                LocalCache.LoadRemoteBitmapThumb((String) (currentItem.get("resHash")), w, h, ivMain);
            }

            ivMain.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    int i;

                    if(container.containerActivity.sInChooseMode) {
                        if(currentItem.get("selected").equals("1")) currentItem.put("selected", "0");
                        else currentItem.put("selected", "1");
                        calcSelectAll();
                        ((BaseAdapter)container.mainListView.getAdapter()).notifyDataSetChanged();
                    }
                    else {
                        LocalCache.TransActivityContainer.put("imgSliderList", imgList);
                        Intent intent = new Intent();
                        for (i = 0; i < container.imgList.size(); i++)
                            if (container.imgList.get(i) == currentItem) break;
                        intent.putExtra("pos", i);
                        intent.setClass(containerActivity, PhotoSliderActivity.class);
                        containerActivity.startActivity(intent);
                    }
                }
            });

            ivMain.setLongClickable(true);
            ivMain.setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    container.containerActivity.showChooseHeader();
                    return true;
                }
            });

            if(container.containerActivity.sInChooseMode) {
                if(currentItem.get("locked").equals("1")) ivLock.setVisibility(View.VISIBLE);
                else ivLock.setVisibility(View.GONE);
                if(currentItem.get("selected").equals("1")) ivSelect.setVisibility(View.VISIBLE);
                else ivSelect.setVisibility(View.GONE);
            }
            else {
                ivLock.setVisibility(View.GONE);
                ivSelect.setVisibility(View.GONE);
            }

            //LocalCache.LoadLocalBitmap("temp0001", ivMain);
            //LocalCache.LoadRemoteBitmapThumb((String) (currentItem.get("resHash")), ivMain);

            return view;
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public Object getItem(int position) {
            return ((List<Map<String, Object>>)dateItem.get("images")).get(position);
        }
    }
}
